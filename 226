#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <iostream>
#include <string>
#include <algorithm>
#include <map>
#include <cmath>
#include <ctime>
#include <set>
#include <stack>
#define INF 1000010

using namespace std;

const int maxn = 210;

typedef struct node
{
	int x, dep, color;
}node;
node qu[maxn*maxn];
int dp[maxn][maxn];
int a[maxn][maxn];
int visit[maxn][maxn];

int main()
{
	int n, m, i, j, x, y, c, left, right, val, ans = -1;

	memset(a, 0, sizeof(maxn));
	memset(visit, 0, sizeof(visit));
	for (i = 0; i < maxn; ++i)
		for (j = 0; j < maxn; j++)
			dp[i][j] = maxn;
	
	scanf("%d%d", &n, &m);
	for (i = 0; i < m; ++i)
	{
		scanf("%d%d%d", &x, &y, &c);
		a[x][y] = c;
	}
	left = 0, right = 0;
	for (i = 1; i <= n; ++i)
	{
		if (a[1][i] != 0)
		{
			qu[right].color = a[1][i];
			qu[right].dep = 1;
			qu[right].x = i;
			right++;
			visit[1][i] = 1;
		}
	}

	while (left < right)
	{
		val = qu[left].x;
		if (val == n)
		{
			ans = qu[left].dep;
			break;
		}
		for (i = 1; i <= n; ++i)
		{
			if (a[val][i] != 0 && visit[val][i] == 0 && a[val][i] != qu[left].color)
			{
				qu[right].color = a[val][i];
				qu[right].dep = qu[left].dep + 1;
				qu[right].x = i;
				visit[val][i] = 1;
				right++;
			}
		}
		left++;
	}
	printf("%d\n", ans);

	return 0;
}
