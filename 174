#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <iostream>
#include <string>
#include <algorithm>
#include <map>
#include <cmath>
#include <ctime>
#include <set>

using namespace std;

const int maxn = 400010;

typedef struct point
{
	int x, y;
}point;

typedef struct segment
{
	point a, b;
}segment;
segment a[maxn];
int n, p[maxn];
map<point, int>hah;

bool operator < (const point &x, const point &y)
{
	if (x.x != y.x) return x.x < y.x;
	return x.y < y.y;
}

int find(int &x)
{
	if (p[x] != x)
		p[x] = find(p[x]);
	return p[x];
}

void solve()
{
	int i, u, v;
	for (i = 0; i < 2*n; i++)
		p[i] = i;
	int cnt = 0;
	for (i = 1; i <= n; i++)
	{
		if (hah.count(a[i].a)) u = hah[a[i].a];
		else u = hah[a[i].a] = cnt++;
		if (hah.count(a[i].b)) v = hah[a[i].b];
		else v = hah[a[i].b] = cnt++;
		u = find(u), v = find(v);
		if (u == v)
		{
			printf("%d\n", i);
			return ;
		}
		p[u] = v;
	}
	puts("0");
}

int main()
{
	while (~scanf("%d", &n))
	{
		int i;
		for (i = 1; i <= n; i++)
			scanf("%d%d%d%d", &a[i].a.x, &a[i].a.y, &a[i].b.x, &a[i].b.y);
		solve();
	}

	return 0;
}
